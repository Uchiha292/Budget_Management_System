# -*- coding: utf-8 -*-
"""Pyhton_Project

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1rIB53JHhklt-CD38JXJ_wew4yrOkRz5Z
"""

import sys
import datetime


#decrypt lambda function
decrypt_lambda = lambda num,key: (num - key) % 26

#encrypt lambda function
encrypt_lambda = lambda num,key: (num + key) % 26

#Management System Class
class PBMS: #Personal Budget Management System
  def __init__(self):
    self.users = []
    self.read_file("User_Data.txt")



  #Main Menu
  def main_menu(self, user):
    _check = True #for main menu

    while(_check):
      user_input = int(input('''
1. Add Budget
2. Create Section
3. Delete Section
4. Check Budget
5. View All Sections
6. View Section History
7. View Budget History
8. Update Section
0. Log Out
      '''))

      print("\n")

      if user_input == 0:
        _check = False

      if user_input == 1:
        user.add_budget()

      if user_input == 2:
        user.create_section()

      if user_input == 3:
        user.del_section()

      if user_input == 4:
        user.check_budget()

      if user_input == 5:
        user.view_all_sections()

      if user_input == 6:
        user.view_section_history()

      if user_input == 7:
        user.view_budget_history()

      if user_input == 8:
        user_input2 = int(input('''
1. Utilize Money
2. Withdraw Money
3. Add Money
4. Change Section Name
0. Go Back
        '''))

        print("\n")

        if user_input2 == 0:
          pass

        if user_input2 == 1:
          user.utilized_money()

        if user_input2 == 2:
          user.withdraw_money()

        if user_input2 == 3:
          user.add_money()

        if user_input2 == 4:
          user.change_name()



  #Create User Account
  def create_acc(self):
    while(True):

      not_found = False  #check if username doesn't exists
      _name = input("Enter UserName: ")

      #check if username already exists
      for user in self.users:
        if _name == user.name:
          not_found = True
          print("UserName Already Exists")
          print("Type Another UserName")
          break

      if not_found == False:
        break

    #If the username is unique
    while(True):
      _pass = input("Enter Password(Only lower case alphabets): ")
      _re_pass = input("Re-Enter Password: ")

      if _pass != _re_pass:
        print("Password Doesn't Match")
        print("Try Again")
      else:
        break

    _new_user = User(_name, _pass)
    self.users.append(_new_user)




  #Login Function
  def user_login(self):
    _name = input("Enter UserName: ")

    #check if section exists
    for user in self.users:
      if _name == user.name:
        _pass = input("Enter Password: ")
        if _pass == user.password:
          self.main_menu(user)
          return
        else:
          print("Incorrect UserName or Password")
          return

    print("User Doesn't Exist")



  #Function to Save Data in File
  def save_data(self, file_name):
    f = open(file_name, "w")

    for user in self.users:
      #Writing UserName and Password
      encrypt_pass = user.encrypt_pass()
      f.write(f"UserName: {user.name}, Password: {encrypt_pass}\n")

      #Writing Budget
      f.write(f" Budget: {user.budget}\n")

      #Writing Budget History
      if user.budget_history:
        f.write(" Budget History:\n")
        for date, money in user.budget_history:
          _date = date.strftime('%Y-%m-%d %H:%M:%S')
          f.write(f" Date: {_date}, Budget: {money}\n")

      #Writing Sections
      if user.sections:
        for section in user.sections:
          f.write(f" Section: {section.name}, Money Allocated: {section.money_allocated}\n")

      #Writing History of Section's Money
      if user.sections:
        f.write(" Section's Money History:\n")
        for section in user.sections:
          f.write(f" History of {section.name}\n")
          for date, money in section.money_history:
            _date = date.strftime('%Y-%m-%d %H:%M:%S')
            f.write(f" Date: {_date}, Money: {money}\n")

    f.close()



  #Decrypting Function
  def decrypt_pass(self, password):
    key = 16
    alphabets = "abcdefghijklmnopqrstuvwxyz"

    #Decryption
    decrypted_pass = ""

    _num = 0

    # x => string index
    # y => alphabet index
    for x in range(len(password)):
      for y in range(26):
        if password[x] == alphabets[y]:
          _num = y
          _num = decrypt_lambda(_num, key)
          decrypted_pass += alphabets[_num]
          break;

    return decrypted_pass



  #Reading File
  def read_file(self, file_name):
    _user = None
    _temp_section = None
    f = open(file_name, 'r')

    while(True):
      line = f.readline()

      if not line:
        break

      #Storing UserName and Password
      if line.startswith("UserName:"):
        line_parts = line.split(", ")
        #read UserName
        _name = line_parts[0].split(": ")[1]
        #read password
        _pass = line_parts[1].split(": ")[1]
        #decrypt password
        _pass = self.decrypt_pass(_pass)
        #Creating User
        _user = User(_name, _pass)
        #Storing User in list
        self.users.append(_user)

      #Storing Budget
      elif line.startswith(" Budget:"):
        _user.budget = int(line.split(": ")[1])

      #Storing Budget History
      elif line.startswith(" Date:") and "Budget" in line:
        line_parts = line.split(", ")
        #Read date
        _date = line_parts[0].split(": ")[1]
        #string to datetime
        date = datetime.datetime.strptime(_date, "%Y-%m-%d %H:%M:%S")
        #Read Budget
        _budget = int(line_parts[1].split(": ")[1])
        #Append in Budget History List
        _user.budget_history.append((date, _budget))

      #Storing Sections
      elif line.startswith(" Section:"):
        line_parts = line.split(", ")
        #Reading Section Name
        _name = line_parts[0].split(": ")[1]
        #Reading Allocated Money
        _money = int(line_parts[1].split(": ")[1])
        #Creating Section
        _section = Section(_name, _money)
        #Append in Section List
        _user.sections.append(_section)

      #Temporarily Storing Sections Name
      elif line.startswith(" History of"):
        line_parts = line.split(" ")[3]
        #temporarily keeping section
        #will be used to store section's history
        for x in _user.sections:
          if x.name == line_parts:
            _temp_section = x
            break


      #Storing Sections's Money History
      elif line.startswith(" Date:") and "Money" in line:
        line_parts = line.split(", ")
        #Read date
        _date = line_parts[0].split(": ")[1]
        #string to datetime
        date = datetime.datetime.strptime(_date, "%Y-%m-%d %H:%M:%S")
        #Read Money
        _money = int(line_parts[1].split(": ")[1])
        #Append in Budget History List
        if _temp_section in _user.sections:
          _temp_section.money_history.append((date, _money))

    f.close()





#--------------------------------------------------------------------------#






#User Class
class User:
  def __init__(self, name, password):
    self.name = name
    self.password = password
    self.budget = 0
    self.budget_history = [] #list to maintain budget history(date,budget)
    self.sections = [] #list containing all sections



  #Encryption Function
  def encrypt_pass(self):
    alphabets = "abcdefghijklmnopqrstuvwxyz"
    key = 16
    encrypted_string = ""
    string_length = len(self.password)

    # x => string index
    # y => alphabet index
    for x in range(string_length):
      for y in range(26):
        if self.password[x] ==alphabets[y]:
          _num = y
          _num = encrypt_lambda(_num, key)
          encrypted_string += alphabets[_num]
          break

    return encrypted_string


  # Add/Update Budget
  def add_budget(self):
    _budget = input("Enter Budget: ")
    self.budget += int(_budget)
    self.budget_history.append((datetime.datetime.now(), self.budget))



  # Function to Create New Section
  def create_section(self):
    _name = input("Enter Section Name: ")

    #check if section already exists
    for section in self.sections:
      if _name == section.name:
        print("Section Already Exists")
        return

    while(True):
      _money = input("Allocate Money: ")
      _money = int(_money)

      if _money > self.budget:
        print("Not enough budget")
        print("Try Again")

      else:
        #creating new section
        _new_section = Section(_name, _money)

        print("New Section Created\n")

        #adding section to list
        self.sections.append(_new_section)

        #Subtracting Allocated money from budget
        self.budget -= _money
        self.budget_history.append((datetime.datetime.now(), self.budget))
        break


  #Function to Delete a Section
  def del_section(self):
    _name = input("Enter Section Name: ")
    for x in self.sections:
      if _name == x.name:
        self.budget += x.money_allocated
        self.budget_history.append((datetime.datetime.now(), self.budget))
        del x.money_history
        self.sections.remove(x)
        print("Section:", _name, " Deleted\n")
        break



  #Check Budget
  def check_budget(self):
    print("Budget:", self.budget)



  # Function to manage utlized amount
  def utilized_money(self):
    _name = input("Enter Section Name: ")

    #check if section exists
    for section in self.sections:
      if _name == section.name:
        section.utilized_money()
        return

    print("Section doesn't exist")



  # Function to withdraw money
  def withdraw_money(self):
    _name = input("Enter Section Name: ")

    #check if section exists
    for section in self.sections:
      if _name == section.name:
        self.budget += section.withdraw_money()
        return

    print("Section doesn't exist")


  #Add/Allocate Money to a Section
  def add_money(self):
    if self.budget == 0:
      print("Budget: 0")
      return

    _name = input("Enter Section Name: ")
    #check if section exists
    for section in self.sections:
      if _name == section.name:
        self.budget = section.add_money(self.budget)
        self.budget_history.append((datetime.datetime.now(), self.budget))
        return

    print("Section doesn't exist")



  #View All Sections
  def view_all_sections(self):
    for section in self.sections:
      print(f"Section: {section.name}, Money: {section.money_allocated}")



  #View Section History
  def view_section_history(self):
    _name = input("Enter Section Name: ")
    for section in self.sections:
      if _name == section.name:
        for date, money in section.money_history:
          _date = date.strftime('%Y-%m-%d %H:%M:%S')
          print(f"Date: {_date}, Money: {money}")
     #   return
    #print("Section doesn't exist")



  #View Budget History
  def view_budget_history(self):
    if not self.budget_history:
      print("No history")

    for date, budget in self.budget_history:
      _date = date.strftime('%Y-%m-%d %H:%M:%S')
      print(f"Date: {_date}, Money: {budget}")


  #Change Section Name
  def change_name(self):
    _name = input("Enter Section Name: ")
    #check if section exists
    for section in self.sections:
      if _name == section.name:
        section.change_name()
        return
    print("Section Doesn't Exist")







#--------------------------------------------------------------------------#






#Section's Class
#e.g. Savings, Daily Necessities, Education etc
class Section:
  def __init__(self, name, money_allocated=0):
    self.name = name
    self.money_allocated = money_allocated
    self.money_history = [(datetime.datetime.now(), self.money_allocated)]



  def __str__(self):
    return f"Name: {self.name}, Money_Allocated: {(self.money_allocated)}"



  # Function to manage utlized amount
  def utilized_money(self):

    if self.money_allocated == 0:
      print("Money Allocated = 0")
      print("Can't utlize money")

    else:
      #if utilized money exceeds allocated amount
      #will ask for input again
      while(True):
        _money = input("Enter utilized money: ")
        _money = int(_money)

        if _money > self.money_allocated:
          print("Amount exceeds allocated money")
          print("Try Again")

        else:
          self.money_allocated -= _money
          self.money_history.append((datetime.datetime.now(), self.money_allocated))
          break


  #Function to withdraw money
  def withdraw_money(self):
    if self.money_allocated == 0:
      print("Money Allocated = 0")
      print("Can't withdraw money")

    else:
      while(True):
        print("To withdraw all money, type all, or")
        _money = input("Enter amount of money to withdraw: ")

        #If user withdraws types all
        #withdraw all allocated money
        if _money == "all":
          _money = self.money_allocated
          self.money_allocated = 0
          self.money_history.append((datetime.datetime.now(), self.money_allocated))
          return int(_money) #_money will added to budget

        #If user inputs amount
        _money = int(_money)

        if _money > self.money_allocated:
          print("Amount exceeds allocated money")
          print("Try Again")

        else:
          self.money_allocated -= _money
          self.money_history.append((datetime.datetime.now(), self.money_allocated))
          return _money #_money will added to budget



  #Function to add/allocate money in section
  def add_money(self, budget):
    _money = input("Enter amount of money to add: ")
    _money = int(_money)

    while(True):
      #If insufficent budget
      if _money > budget:
        print("Not enough Budget")
        print("Try Again")

      else:
        budget -= _money
        self.money_allocated += _money
        self.money_history.append((datetime.datetime.now(), self.money_allocated))
        return budget



  #Change Section Name
  def change_name(self):
    _name = input("Enter New Name: ")
    self.name = _name
    print("Section Name changed")




#---------------------------------------------------------------------------#




pbms = PBMS()

_check = True #for Login Screen
while(_check):

  user_input = int(input('''
  1. Login
  2. Register
  0. Exit
  '''))

  print("\n")

  if user_input == 0:
    pbms.save_data("User_Data.txt")
    print("Exiting Program")
    _check = False

  if user_input == 1:
    pbms.user_login()

  if user_input == 2:
    pbms.create_acc()